name: Continuous Integration and Delivery

on:
    push:
      branches:
        - render
    # workflow_dispatch:
    #   branches:
    #     - main

env:
    #
    WEATHER_APP_WEB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/enhanced_weather_app
    WEATHER_APP_NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx
    REGISTRY: ghcr.io

permissions:
    contents: read
    issues: write
    id-token: write

jobs:      
    terraform:
        name: "deploy resources with terraform"
        runs-on: ubuntu-latest
        defaults:
            run:
              shell: bash
              working-directory: ./terraform-aws
        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v3.0.0
              with:
                fetch-depth: 0

            - id: "auth"
              name: "Authenticate to AWS"
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                # role-to-assume: arn:aws:iam::985952578243:role/GitHub-3rd-Party-Action
                # role-duration-seconds: 28800
                aws-region: us-east-1

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                terraform_version: 1.5.7

            - id: backend-config
              uses: amannm/terraform-s3-backend-action@v1
              with:
                account-id: "${{ secrets.AWS_ACCOUNT_ID }}"
                region: "us-east-1"
                role: "github-actions-backend-config"
                bucket: "weather-app-tfstate"
                key: "state/terraform.tfstate"
            - run: |
                terraform init -backend-config="${{ steps.backend-config.outputs.path }}"

            # - name: Terraform init and validate
            #   run: terraform init -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

            - name: Terraform plan
              run: terraform plan
                
        #   - uses: trstringer/manual-approval@v1
    #     with:
    #       secret: ${{ github.TOKEN }}
    #       approvers: laysauchoa
    #       minimum-approvals: 1
    #       issue-title: "Deploying v1.0.0 to prod"
    #       issue-body: "Review the terraform plan, then approve or deny the deployment of v1.0.0 to prod."
    #       exclude-workflow-initiator-as-approver: false

            - name: Terraform apply
              run: terraform apply -auto-approve
    
    build:
        name: Build the Docker Image
        runs-on: ubuntu-latest
        defaults:
            run:
              shell: bash
              working-directory: ./
        steps:
            - name: checkout main
              uses: actions/checkout@v3

            - name: Set environment variables to .env
              run: |
                echo "WEATHER_APP_WEB_IMAGE=$(echo ${{env.WEATHER_APP_WEB_IMAGE}} )" >> $GITHUB_ENV
                echo "WEATHER_APP_NGINX_IMAGE=$(echo ${{env.WEATHER_APP_NGINX_IMAGE}} )" >> $GITHUB_ENV
            - name: Log in to GitHub Packages
              env:
                    PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
              run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin

            - name: Pull images
              run: |
                docker pull ${{ env.WEATHER_APP_WEB_IMAGE }} || true
                docker pull ${{ env.WEATHER_APP_NGINX_IMAGE }} || true
            - name: Build images
              id: build-images
              run: |
                docker-compose -f docker-compose.ci.yml build
            - name: Push images
              run: |
                docker push ${{ env.WEATHER_APP_WEB_IMAGE }}
                docker push ${{ env.WEATHER_APP_NGINX_IMAGE }}
    
    checking-secrets:
        name: Checking secrets
        runs-on: ubuntu-latest
        needs: build
        outputs:  
            secret_key_exists: ${{steps.check_secrets.outputs.defined}}

        steps:
            - name: Check for Secrets availabilities
              id: check_secrets
              shell: bash
              run: |
                if [[ -n "${{ secrets.PRIVATE_KEY }}" && -n "${{secrets.AWS_EC2_IP_ADDRESS}}" && -n "${{secrets.AWS_HOST_USER}}" ]]; then
                echo "defined=true" >> $GITHUB_OUTPUT;
                else
                echo "defined=false" >> $GITHUB_OUTPUT;
                fi

    deploy:
        name: Deploy to AWS EC2
        runs-on: ubuntu-latest
        needs: checking-secrets
        if: needs.checking-secrets.outputs.secret_key_exists == 'true'
        steps:
          - name: Checkout main
            uses: actions/checkout@v3

          - name: Add environment variables to .env
            run: |
                echo WEATHER_APP_WEB_IMAGE=${{ env.WEATHER_APP_WEB_IMAGE }} >> .env
                echo WEATHER_APP_NGINX_IMAGE=${{ env.WEATHER_APP_NGINX_IMAGE }} >> .env
                echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
                echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
          - name: Add the private SSH key to the ssh-agent
            env:
                SSH_AUTH_SOCK: /tmp/ssh_agent.sock
            run: |
                mkdir -p ~/.ssh
                ssh-agent -a $SSH_AUTH_SOCK > /dev/null
                ssh-keyscan github.com >> ~/.ssh/known_hosts
                ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
          - name: Deploy images on AWS EC2
            env:
                SSH_AUTH_SOCK: /tmp/ssh_agent.sock

            run: |
                scp -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml ${{secrets.AWS_HOST_USER}}@${{ secrets.AWS_EC2_IP_ADDRESS }}:
                ssh -o StrictHostKeyChecking=no ${{secrets.AWS_HOST_USER}}@${{ secrets.AWS_EC2_IP_ADDRESS }} << EOF
                    docker-compose down --rmi all -v
                    docker login ghcr.io -u ${{secrets.NAMESPACE}} -p ${{secrets.PERSONAL_ACCESS_TOKEN}}
                    docker pull $WEATHER_APP_WEB_IMAGE
                    docker pull $WEATHER_APP_NGINX_IMAGE
                    docker-compose --env-file=.env -f docker-compose.prod.yml up -d --build
                    docker logout
                EOF